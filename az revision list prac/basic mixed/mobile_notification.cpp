// /*Question
// You recently bought a new mobile phone. There are N applications in the phone and all generate notifications. There are 3 types of events

// 1 X - A new notification is generated by application X
// 2 X - You read all notifications by application X, you may re-read some notifications
// 3 Y - You read the first Y notifications in the phone. Note that you donâ€™t read the first Y unread notifications, you just read the first Y notifications and you might re-read a few notifications. It is guaranteed that there have been Y notifications before this.
// After every event, find the number of unread notifications in the mobile phone.*/


#include <bits/stdc++.h>
using namespace std;

void solve()
{
    int n, q;
    cin>>n>>q;
    int unread = 0;
    unordered_map<int, int> mp;     // key-> App, value-> Number of unread notif
    vector<int> v;                  //to maintain sequence in which notifications are being made
    while (q--)
    {
        int z, x;
        cin >> z >> x;
        if (z == 1)
        {
            mp[x]++;            //increase number of notif of that app
            unread++;           //notif is genereated, so increase the unread
            v.push_back(x);
        }
        else if (z == 2)
        {
            while (mp[x])       //until frequency of unread notif becomes 0 keep reading them
            {
                mp[x]--;        
                unread--;
            }
        }
        else
        {
            for (int i = 0; i < x; i++)         //we need to read first x notifications
            {
                if (mp[v[i]])               //if the notifcation are unread in the sequence, read them
                {   
                    mp[v[i]]--;
                    unread--;
                }
                else            //else just continue forward
                {
                    continue;
                }
            }
        }
        cout<<unread<<endl;

    }
}
signed main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int _t;
    cin >> _t;
    while (_t--)
        solve();
}